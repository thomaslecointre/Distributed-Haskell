Haskell Search
Protocole de communication et mode d'emploi

Introduction

Notre plate-forme intitulé Haskell-Search utilise un protocole de communication optimisé pour une faible bande passante. Nous nous sommes
efforcés de communiquer uniquement ce qui est nécessaire, laissant aux composants de remplir les informations manquantes ou nécessaires.

Notre plate-forme se déploie au minimum sur 2 ordinateurs. Le premier ordinateur abrite le Web Serveur (fonctionnant sous Node JS),
le Messenger et le Master (la nomenclature des processus haskell est expliquée plus tard). Un Slave correspond à une machine capable 
d'executer du haskell.

Au préalable il est nécessaire que le Web Server et le Master (processus haskell) soient en route avant que le premier client
ne se connecte. Chaque Slave doit s’enregistrer auprès du Master en se connectant au port 4444.

Déroulement

1. Le client se connecte au site web, rentre un nom de série, un mot clef (si recherche par mot clef est activée) et lance 
une tentative de recherche.
    - Le Web Server doit vérifier qu'un nom de série et un mot clef ont bien été saisis. Sinon, le client est 
    invité à réessayer.
    - Le Web Server requête l'api imdb et remplit un dossier (/public/nom_de_serie) plein de JSON si la requête est un succès.
    Si aucune information est trouvée le Web Server doit demander au client de saisir un autre nom de série.

2. Une requête sur l'api imdb valide lance un processus haskell appelé "Messenger". Le Messenger reçoit comme ordre d'arguments
    - Le mot clef (s'il y en a), sinon "N/A"
    - le nom de serie correspondant au nom du dossier créé par le Web Server (Ex: game_of_thrones)
    - Pour chaque saison, le nombre d'épisodes pour ladite saison.

    Ex: "Ned" "game_of_thrones" "10" "10" "10" "10" ...

3. Le Messenger doit envoyer ces informations au Master sur le port 4445. Ce message prend la forme suivante:
    "[\"Ned\", \"game_of_thrones\", 10, 10, ...]". Le Messenger doit attendre la suite des instructions venant du Master.

4. Le Master transforme ces données et envoie, à chaque Slave enregistré, un tableau de tableau de String correspondant à une
ou plusieurs saisons de la série suivant le résultat du calcul : #saisons = #Slaves * q + r. Chaque Slave reçoit ces données sur le port 5000.
L'adresse IP de chaque Slave est récupéré et connu avant même que le Master reçoive l'ordre venant du Messenger.

Arguments :
    -> Mot clef
    -> Nom de la série formaté URL
    -> Numéro de la saison
    -> Nombre d'épisodes pour cette saison

Ex: "[[\"Ned\", \"game_of_thrones\", 1, 10], [\"Ned\", \"game_of_thrones\", 2, 10]]

5. Chaque Slave transforme ces données pour reconstituer des url de la forme http://185.167.204.218:8081/public/game_of_thrones/1/1 

Cette URL est accompagnée d'une requête GET. 

La donnée "public" est supposée valide dans la constitution des URL.

Séquence : (Gestion des erreurs non traîtée)
    - Chaque Slave traîte ses données.
    - Après traitement, chaque Slave envoie sur le port 4446 du Master un tableau indiquant que les données sont traitées.
    - Si le client a demandé une étude de mot clef, le Slave renvoie : 
    
        Arguments : 
            -> Numéro de la saison
            -> Numéro de l'épisode
            -> Nombre d'occurrences du mot clef dans la description de l'épisode
        
        Ex : "[[[1, 1, 5]+]+]"
        La longueur du tableau renvoyé par chaque Slave correspond au nombre de saisons qui ont été traîté par ce Slave.

    - Si le client a demandé une étude statistique le Slave renvoie :

        Arguments : 
            -> Numéro de la saison
            -> Numéro de l'épisode
            -> (Mot contenu dans la description de l'épisode , Nombre d'occurrences de ce mot) +

        Ex : "[[1, 1, [(\"mot_clef\", #)+]]+]"
        La longueur du tableau renvoyé par chaque Slave correspond au nombre de saisons qui ont été traîté par ce Slave.

6. Après avoir reçu l'ensemble des données traitées il se met à créer des JSON suivant le type d'étude.

Pour une étude par mot clef il doit fabriquer 3 fichiers JSON indiquant la manière de remplir le template html 
(.ejs ou .jade à vérifier) présent sur le Web Server. Les modes d'affichage sont

    - chronologique -> On affiche chronologiquement les épisodes. Plus un épisode correspond au mot clef, plus il est "visible"
    à l'affichage.

        - Le JSON a la forme suivante:
            {
                "1" : [2, 5, 6, 8, ...],
                "2" : [...],
                ...
            }
            Une clef correspond au numéro d'une saison. La valeur est un tableau avec pour chaque indice d'épisode, la pertinence du
            mot clef.

    - par saison -> Par saison, on affiche les épisodes par ordre descendant de pertinence par rapport au mot clef.
    
        - Le JSON a la forme suivante:
            {
                "1" : [{"3", 7}, {"7", 6}, {"5", 5}...],
                "2" : [...],
                ...
            }
            Une clef correspond au numéro d'une saison. La valeur est un tableau d'objets JSON avec comme clef le numéro d'épisode,
            la valeur est la pertinence de l'épisode par rapport au mot clef.

    - pertinence -> On affiche par ordre descendant de pertinence.
        - Le JSON a la forme suivante:
            {
                "1_2" : 15,
                "3_7"  : 14,
                ...
            }
            Une clef est un string constitué d'un numéro de saison suivi d'un _ puis d'un numéro d'épisode. La valeur est la pertinence.

Pour une étude statistique, un seul JSON est nécessaire. 
    - Le JSON a la forme suivante:
        {
            "1" : [{ ("mot_clef": #)+ }+], Les parenthèses ne représentent pas un tuple (n'existe pas en JSON), cela permet juste d'inférer la multiplicité
            "2" : [{ ("mot_clef": #)+ }+],
            ...
        }
        Une clef est un numéro de saison. La valeur est un tableau d'objets JSON où à chaque indice d'épisode, on a l'ensemble des
        couples clefs, valeurs correspondant à un mot de la description et son occurrence.

7. Suite au dépot de ces fichiers JSON, le Master envoie un signe de fin de traitement au Messenger. Le Messenger s'éteigne et le Web
Server, enregistrant la fin du processus, peut alors remplir le template et envoyer les informations au client.